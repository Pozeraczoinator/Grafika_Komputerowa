<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<script type="text/javascript">
var gl;
var shaderProgram;
var uPMatrix;
var vertexPositionBuffer;
var vertexColorBuffer;
var vertexCoordsBuffer;
var vertexNormalBuffer;

function MatrixMul(a,b) //Mnożenie macierzy
{
  let c = [
  0,0,0,0,
  0,0,0,0,
  0,0,0,0,
  0,0,0,0
  ]
  for(let i=0;i<4;i++)
  {
    for(let j=0;j<4;j++)
    {
      c[i*4+j] = 0.0;
      for(let k=0;k<4;k++)
      {
        c[i*4+j]+= a[i*4+k] * b[k*4+j];
      }
    }
  }
  return c;
}

function MatrixTransposeInverse(m)
{
  let r = [
        0, 0, 0, 0,
        0, 0, 0, 0,
        0, 0, 0, 0,
        0, 0, 0, 0
    ];
  r[0] = m[5]*m[10]*m[15] - m[5]*m[14]*m[11] - m[6]*m[9]*m[15] + m[6]*m[13]*m[11] + m[7]*m[9]*m[14] - m[7]*m[13]*m[10];
  r[1] = -m[1]*m[10]*m[15] + m[1]*m[14]*m[11] + m[2]*m[9]*m[15] - m[2]*m[13]*m[11] - m[3]*m[9]*m[14] + m[3]*m[13]*m[10];
  r[2] = m[1]*m[6]*m[15] - m[1]*m[14]*m[7] - m[2]*m[5]*m[15] + m[2]*m[13]*m[7] + m[3]*m[5]*m[14] - m[3]*m[13]*m[6];
  r[3] = -m[1]*m[6]*m[11] + m[1]*m[10]*m[7] + m[2]*m[5]*m[11] - m[2]*m[9]*m[7] - m[3]*m[5]*m[10] + m[3]*m[9]*m[6];

  r[4] = -m[4]*m[10]*m[15] + m[4]*m[14]*m[11] + m[6]*m[8]*m[15] - m[6]*m[12]*m[11] - m[7]*m[8]*m[14] + m[7]*m[12]*m[10];
  r[5] = m[0]*m[10]*m[15] - m[0]*m[14]*m[11] - m[2]*m[8]*m[15] + m[2]*m[12]*m[11] + m[3]*m[8]*m[14] - m[3]*m[12]*m[10];
  r[6] = -m[0]*m[6]*m[15] + m[0]*m[14]*m[7] + m[2]*m[4]*m[15] - m[2]*m[12]*m[7] - m[3]*m[4]*m[14] + m[3]*m[12]*m[6];
  r[7] = m[0]*m[6]*m[11] - m[0]*m[10]*m[7] - m[2]*m[4]*m[11] + m[2]*m[8]*m[7] + m[3]*m[4]*m[10] - m[3]*m[8]*m[6];

  r[8] = m[4]*m[9]*m[15] - m[4]*m[13]*m[11] - m[5]*m[8]*m[15] + m[5]*m[12]*m[11] + m[7]*m[8]*m[13] - m[7]*m[12]*m[9];
  r[9] = -m[0]*m[9]*m[15] + m[0]*m[13]*m[11] + m[1]*m[8]*m[15] - m[1]*m[12]*m[11] - m[3]*m[8]*m[13] + m[3]*m[12]*m[9];
  r[10] = m[0]*m[5]*m[15] - m[0]*m[13]*m[7] - m[1]*m[4]*m[15] + m[1]*m[12]*m[7] + m[3]*m[4]*m[13] - m[3]*m[12]*m[5];
  r[11] = -m[0]*m[5]*m[11] + m[0]*m[9]*m[7] + m[1]*m[4]*m[11] - m[1]*m[8]*m[7] - m[3]*m[4]*m[9] + m[3]*m[8]*m[5];

  r[12] = -m[4]*m[9]*m[14] + m[4]*m[13]*m[10] + m[5]*m[8]*m[14] - m[5]*m[12]*m[10] - m[6]*m[8]*m[13] + m[6]*m[12]*m[9];
  r[13] = m[0]*m[9]*m[14] - m[0]*m[13]*m[10] - m[1]*m[8]*m[14] + m[1]*m[12]*m[10] + m[2]*m[8]*m[13] - m[2]*m[12]*m[9];
  r[14] = -m[0]*m[5]*m[14] + m[0]*m[13]*m[6] + m[1]*m[4]*m[14] - m[1]*m[12]*m[6] - m[2]*m[4]*m[13] + m[2]*m[12]*m[5];
  r[15] = m[0]*m[5]*m[10] - m[0]*m[9]*m[6] - m[1]*m[4]*m[10] + m[1]*m[8]*m[6] + m[2]*m[4]*m[9] - m[2]*m[8]*m[5];

  var det = m[0]*r[0] + m[1]*r[4] + m[2]*r[8] + m[3]*r[12];
  for (var i = 0; i < 16; i++) r[i] /= det;
  
  let rt = [ r[0], r[4], r[8], r[12],
             r[1], r[5], r[9], r[13],
             r[2], r[6], r[10], r[14],
             r[3], r[7], r[11], r[15]
             ];
  
  return rt;
}

function CreateIdentytyMatrix()
{
  return [
  1,0,0,0, //Macierz jednostkowa
  0,1,0,0,
  0,0,1,0,
  0,0,0,1
  ];
}

function CreateTranslationMatrix(tx,ty,tz)
{
  return  [
  1,0,0,0,
  0,1,0,0,
  0,0,1,0,
  tx,ty,tz,1
  ];
}

function CreateScaleMatrix(sx,sy,sz)
{
  return [
  sx,0,0,0,
  0,sy,0,0,
  0,0,sz,0,
  0,0,0,1
  ];
}

function CreateRotationZMatrix(angleZ)
{
  return [
  +Math.cos(angleZ*Math.PI/180.0),+Math.sin(angleZ*Math.PI/180.0),0,0,
  -Math.sin(angleZ*Math.PI/180.0),+Math.cos(angleZ*Math.PI/180.0),0,0,
  0,0,1,0,
  0,0,0,1
  ];
}

function CreateRotationYMatrix(angleY)
{
  return [
  +Math.cos(angleY*Math.PI/180.0),0,-Math.sin(angleY*Math.PI/180.0),0,
  0,1,0,0,
  +Math.sin(angleY*Math.PI/180.0),0,+Math.cos(angleY*Math.PI/180.0),0,
  0,0,0,1
  ];
}

function CreateRotationXMatrix(angleX)
{
  return [
  1,0,0,0,
  0,+Math.cos(angleX*Math.PI/180.0),+Math.sin(angleX*Math.PI/180.0),0,
  0,-Math.sin(angleX*Math.PI/180.0),+Math.cos(angleX*Math.PI/180.0),0,
  0,0,0,1
  ];
}

function createRect(mx,my,mz,dax,day,daz,dbx,dby,dbz)
{
  p1x = mx;             p1y = my;             p1z = mz;
  p2x = mx + dax;       p2y = my + day;       p2z = mz + daz;
  p3x = mx + dbx;       p3y = my + dby;       p3z = mz + dbz;
  p4x = mx + dax + dbx; p4y = my + day + dby; p4z = mz + daz + dbz;
  
  let vertexPosition = [p1x,p1y,p1z, p2x,p2y,p2z, p4x,p4y,p4z,  //Pierwszy trójkąt
                        p1x,p1y,p1z, p4x,p4y,p4z, p3x,p3y,p3z]; //Drugi trójkąt
                        
  return vertexPosition;
}

function createNormal(p1x,p1y,p1z,p2x,p2y,p2z,p3x,p3y,p3z) //Wyznaczenie wektora normalnego dla trójkąta
{
  let v1x = p2x - p1x;
  let v1y = p2y - p1y;
  let v1z = p2z - p1z;
  
  let v2x = p3x - p1x;
  let v2y = p3y - p1y;
  let v2z = p3z - p1z;
  
  let v3x =  v1y*v2z - v1z*v2y;
  let v3y =  v1z*v2x - v1x*v2z;
  let v3z =  v1x*v2y - v1y*v2x;
  
  vl = Math.sqrt(v3x*v3x+v3y*v3y+v3z*v3z); //Obliczenie długości wektora
   
  v3x/=vl; //Normalizacja na zakreś -1 1
  v3y/=vl;
  v3z/=vl;
  
  let vertexNormal = [v3x,v3y,v3z, v3x,v3y,v3z, v3x,v3y,v3z];
  return vertexNormal;
}

function CreateBox(x,y,z,dx,dy,dz)
{
  //Opis sceny 3D, położenie punktów w przestrzeni 3D w formacie X,Y,Z 
  let vertexPosition = []; //3 punkty po 3 składowe - X1,Y1,Z1, X2,Y2,Z2, X3,Y3,Z3 - 1 trójkąt
  let vertexNormal = [];
  
  vertexPosition.push(...createRect(-1,-1,-1,0,2,0,2,0,0));
  vertexPosition.push(...createRect(-1,-1,-1,0,0,2,0,2,0));
  vertexPosition.push(...createRect(-1,-1,-1,2,0,0,0,0,2));
  
  vertexPosition.push(...createRect(1,1,1,-2,0,0,0,-2,0));
  vertexPosition.push(...createRect(1,1,1,0,-2,0,0,0,-2));
  vertexPosition.push(...createRect(1,1,1,0,0,-2,-2,0,0));
  //
  for(let i=0;i<vertexPosition.length;i=i+9)
  {
    vertexNormal.push(...createNormal(vertexPosition[i+0],vertexPosition[i+1],vertexPosition[i+2],vertexPosition[i+3],vertexPosition[i+4],vertexPosition[i+5],vertexPosition[i+6],vertexPosition[i+7],vertexPosition[i+8]));
  }
  
  return [vertexPosition, vertexNormal];
}

function startGL() 
{
  alert("StartGL");
  let canvas = document.getElementById("canvas3D"); //wyszukanie obiektu w strukturze strony 
  gl = canvas.getContext("experimental-webgl"); //pobranie kontekstu OpenGL'u z obiektu canvas
  gl.viewportWidth = canvas.width; //przypisanie wybranej przez nas rozdzielczości do systemu OpenGL
  gl.viewportHeight = canvas.height;
  
    //Kod shaderów
  const vertextShaderSource = ` //Znak akcentu z przycisku tyldy - na lewo od przycisku 1 na klawiaturze
    precision highp float;
    attribute vec3 aVertexPosition; 
    attribute vec3 aVertexNormal;
    uniform mat4 uMMatrix;
    uniform mat4 uInvMMatrix;
    uniform mat4 uVMatrix;
    uniform mat4 uPMatrix;
    varying vec3 vPos;
    varying vec3 vNormal;
    uniform float uNormalMul;
    void main(void) {
      vPos = vec3(uMMatrix * vec4(aVertexPosition, 1.0));
      gl_Position = uPMatrix * uVMatrix * vec4(vPos,1.0); //Dokonanie transformacji położenia punktów z przestrzeni 3D do przestrzeni obrazu (2D)
      vNormal = normalize(mat3(uInvMMatrix) * uNormalMul*aVertexNormal); //Obrot wektorow normalnych
    }
  `;
  const fragmentShaderSource = `
    precision highp float;
    varying vec3 vPos;
    varying vec3 vNormal;
    uniform sampler2D uSampler;
    uniform vec3 uLightPosition;
    uniform vec3 uColor;
    void main(void) {
       vec3 lightDirection = normalize(uLightPosition - vPos);
       float brightness = max(dot(vNormal,lightDirection), 0.0);
      //gl_FragColor = vec4(vColor,1.0); //Ustalenie stałego koloru wszystkich punktów sceny
      //gl_FragColor = texture2D(uSampler,vTexUV)*vec4(vColor,1.0); //Odczytanie punktu tekstury i przypisanie go jako koloru danego punktu renderowaniej figury
      //gl_FragColor = vec4((vNormal+vec3(1.0,1.0,1.0))/2.0,1.0); 
      //gl_FragColor = clamp(texture2D(uSampler,vTexUV) * vec4(brightness,brightness,brightness,1.0),0.0,1.0);
      gl_FragColor = clamp(vec4(uColor,1.0) * vec4(brightness,brightness,brightness,1.0),0.0,1.0);
    }
  `;
  let fragmentShader = gl.createShader(gl.FRAGMENT_SHADER); //Stworzenie obiektu shadera 
  let vertexShader   = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(fragmentShader, fragmentShaderSource); //Podpięcie źródła kodu shader
  gl.shaderSource(vertexShader, vertextShaderSource);
  gl.compileShader(fragmentShader); //Kompilacja kodu shader
  gl.compileShader(vertexShader);
  if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) { //Sprawdzenie ewentualnych błedów kompilacji
    alert(gl.getShaderInfoLog(fragmentShader));
    return null;
  }
  if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
    alert(gl.getShaderInfoLog(vertexShader));
    return null;
  }
  
  shaderProgram = gl.createProgram(); //Stworzenie obiektu programu 
  gl.attachShader(shaderProgram, vertexShader); //Podpięcie obu shaderów do naszego programu wykonywanego na karcie graficznej
  gl.attachShader(shaderProgram, fragmentShader);
  gl.linkProgram(shaderProgram);
  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) alert("Could not initialise shaders");  //Sprawdzenie ewentualnych błedów
  
  //Opis sceny 3D, położenie punktów w przestrzeni 3D w formacie X,Y,Z 
  let vertexPosition; //3 punkty po 3 składowe - X1,Y1,Z1, X2,Y2,Z2, X3,Y3,Z3 - 1 trójkąt
  let vertexNormal;
  
  //[vertexPosition, vertexColor, vertexCoords, vertexNormal] = CreateShpere(0,0,0,2, 6, 12); 
  [vertexPosition, vertexNormal] = CreateBox(0,0,0,1,1,1);
  
  vertexPositionBuffer = gl.createBuffer(); //Stworzenie tablicy w pamieci karty graficznej
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPosition), gl.STATIC_DRAW);
  vertexPositionBuffer.itemSize = 3; //zdefiniowanie liczby współrzednych per wierzchołek
  vertexPositionBuffer.numItems = vertexPosition.length/9; //Zdefinoiowanie liczby trójkątów w naszym buforze
  
  vertexNormalBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexNormalBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormal), gl.STATIC_DRAW);
  vertexNormalBuffer.itemSize = 3;
  vertexNormalBuffer.numItems = vertexNormal.length/9;
  
  //Macierze opisujące położenie wirtualnej kamery w przestrzenie 3D
  let aspect = gl.viewportWidth/gl.viewportHeight;
  let fov = 55.0 * Math.PI / 180.0; //Określenie pola widzenia kamery
  let zFar = 100.0; //Ustalenie zakresów renderowania sceny 3D (od obiektu najbliższego zNear do najdalszego zFar)
  let zNear = 0.1;
  uPMatrix = [
   1.0/(aspect*Math.tan(fov/2)),0                           ,0                         ,0                            ,
   0                         ,1.0/(Math.tan(fov/2))         ,0                         ,0                            ,
   0                         ,0                           ,-(zFar+zNear)/(zFar-zNear)  , -1,
   0                         ,0                           ,-(2*zFar*zNear)/(zFar-zNear) ,0.0,
  ];
  Tick();
} 
//let angle = 45.0; //Macierz transformacji świata - określenie położenia kamery 

var angleZ = 0.0;
var angleY = 0.0;
var angleX = 0.0;
var KameraPositionZ = -8.0;

var Object1PositionX = 0.0;
var Object1PositionY = 0.0;
var Object1PositionZ = 0.0;

var Object1AngleZ = 0.0;

var Object2PositionX = 1.0;
var Object2PositionY = 0.0;
var Object2PositionZ = 0.0;

var Object2AngleZ = 0.0;

var Object3PositionX = 1.0;
var Object3PositionY = 0.0;
var Object3PositionZ = 0.0;

var Object3AngleZ = 0.0;

var LightSize = 0.1;
var Object1Sizedx = 1.0;
var Object1Sizedy = 0.2;
var Object1Sizedz = 0.1;
var Object2Sizedx = 1.0;
var Object2Sizedy = 0.2;
var Object2Sizedz = 0.1;
var Object3Sizedx = 0.4;
var Object3Sizedy = 0.2;
var Object3Sizedz = 0.1;

var LightPositionX = 0;
var LightPositionY = 0;
var LightPositionZ = 3;

// Korpus gora
var UpperBodyPositionX = -1;
var UpperBodyPositionY = 1;
var UpperBodyPositionZ = 0.0;
var UpperBodySizeX = 1;
var UpperBodySizeY = 0.5;
var UpperBodySizeZ = 0.5;
var UpperBodyAngleZ = 0.0;
var UpperBodyAngleX = 0.0;

// Korpus dol
var LowerBodyPositionX = -0.8;
var LowerBodyPositionY = -1.2;
var LowerBodyPositionZ = 0.0;
var LowerBodySizeX = 0.8;
var LowerBodySizeY = 0.8;
var LowerBodySizeZ = 0.4;
var LowerBodyAngleZ = 0.0;
var LowerBodyAngleX = 0.0;

// Głowa
var HeadPositionX = -0.5;
var HeadPositionY = 2.2; // Powinna być na szczycie korpusu
var HeadPositionZ = 0.0;
var HeadSizeX = 0.5;
var HeadSizeY = 0.5;
var HeadSizeZ = 0.5;
var HeadAngleZ = 0.0;

// Lewe ramię - górne
var LeftUpperArmPositionX = -1.5;
var LeftUpperArmPositionY = 0.75;
var LeftUpperArmPositionZ = 0.0;
var LeftUpperArmSizeX = 0.2;
var LeftUpperArmSizeY = 0.6;
var LeftUpperArmSizeZ = 0.2;
var LeftUpperArmAngleZ = 0.0;
var LeftUpperArmAngleX = 0.0;
var LeftUpperArmAngleY = 0.0;

// Lewe ramię - dolne
var LeftLowerArmPositionX = -0.15;
var LeftLowerArmPositionY = -1.25;
var LeftLowerArmPositionZ = 0.0;
var LeftLowerArmSizeX = 0.2;
var LeftLowerArmSizeY = 0.6;
var LeftLowerArmSizeZ = 0.2;
var LeftLowerArmAngleZ = 0.0;
var LeftLowerArmAngleX = -10.0;
var LeftUpperArmAngleY = 0.0;

// Prawe ramię - górne
var RightUpperArmPositionX = 1.1;
var RightUpperArmPositionY = 0.75;
var RightUpperArmPositionZ = 0.0;
var RightUpperArmSizeX = 0.2;
var RightUpperArmSizeY = 0.6;
var RightUpperArmSizeZ = 0.2;
var RightUpperArmAngleZ = 0.0;
var RightUpperArmAngleX = 0.0;
var RightUpperArmAngleY = 0.0;

// Prawe ramię - dolne
var RightLowerArmPositionX = -0.25;
var RightLowerArmPositionY = -1.25;
var RightLowerArmPositionZ = 0.0;
var RightLowerArmSizeX = 0.2;
var RightLowerArmSizeY = 0.6;
var RightLowerArmSizeZ = 0.2;
var RightLowerArmAngleZ = 0.0;
var RightLowerArmAngleX = -10.0;
var RightLowerArmAngleY = 0.0;

// Lewa noga - udo
var LeftUpperLegPositionX = -0.8;
var LeftUpperLegPositionY = -1.5;
var LeftUpperLegPositionZ = 0.0;
var LeftUpperLegSizeX = 0.3;
var LeftUpperLegSizeY = 0.6;
var LeftUpperLegSizeZ = 0.3;
var LeftUpperLegAngleZ = 0.0;
var LeftUpperLegAngleX = 0.0;
var LeftUpperLegAngleY = 0.0;

// Lewa noga - piszczel
var LeftLowerLegPositionX = -0.3;
var LeftLowerLegPositionY = -1.3;
var LeftLowerLegPositionZ = 0.0;
var LeftLowerLegSizeX = 0.3;
var LeftLowerLegSizeY = 0.6;
var LeftLowerLegSizeZ = 0.3;
var LeftLowerLegAngleZ = 0.0;
var LeftLowerLegAngleX = 0.0;
var LeftLowerLegAngleY = 0.0;

// Prawa noga - udo
var RightUpperLegPositionX = 0.2;
var RightUpperLegPositionY = -1.5;
var RightUpperLegPositionZ = 0.0;
var RightUpperLegSizeX = 0.3;
var RightUpperLegSizeY = 0.6;
var RightUpperLegSizeZ = 0.3;
var RightUpperLegAngleZ = 0.0;
var RightUpperLegAngleY = 0.0;
var RightUpperLegAngleX = 0.0;

// Prawa noga - piszczel
var RightLowerLegPositionX = -0.3;
var RightLowerLegPositionY = -1.3;
var RightLowerLegPositionZ = 0.0;
var RightLowerLegSizeX = 0.3;
var RightLowerLegSizeY = 0.6;
var RightLowerLegSizeZ = 0.3;
var RightLowerLegAngleZ = 0.0;
var RightLowerLegAngleX = 0.0;
var RightLowerLegAngleY = 0.0;

function Tick()
{ 
    let uMMatrix0 = CreateIdentytyMatrix(); 
  let uMMatrixUpperBody = CreateIdentytyMatrix();
  let uMMatrixLowerBody = CreateIdentytyMatrix();
  let uMMatrixHead = CreateIdentytyMatrix();
  let uMMatrixLeftUpperArm = CreateIdentytyMatrix();
  let uMMatrixLeftLowerArm = CreateIdentytyMatrix();
  let uMMatrixRightUpperArm = CreateIdentytyMatrix();
  let uMMatrixRightLowerArm = CreateIdentytyMatrix();
  let uMMatrixLeftUpperLeg = CreateIdentytyMatrix();
  let uMMatrixLeftLowerLeg = CreateIdentytyMatrix();
  let uMMatrixRightUpperLeg = CreateIdentytyMatrix();
  let uMMatrixRightLowerLeg = CreateIdentytyMatrix();
  
  let uVMatrix = CreateIdentytyMatrix();
  
  uVMatrix = MatrixMul(uVMatrix,CreateRotationXMatrix(angleX));
  uVMatrix = MatrixMul(uVMatrix,CreateRotationYMatrix(angleY));
  uVMatrix = MatrixMul(uVMatrix,CreateRotationZMatrix(angleZ));
  uVMatrix = MatrixMul(uVMatrix,CreateTranslationMatrix(0,0,KameraPositionZ));
  
  // Korpus gora
  uMMatrixUpperBody = MatrixMul(uMMatrixUpperBody,CreateScaleMatrix(UpperBodySizeX, UpperBodySizeY, UpperBodySizeZ));
  uMMatrixUpperBody = MatrixMul(uMMatrixUpperBody,CreateTranslationMatrix(UpperBodySizeX, 0.0,0.0));
  uMMatrixUpperBody = MatrixMul(uMMatrixUpperBody,CreateRotationZMatrix(UpperBodyAngleZ));
  uMMatrixUpperBody = MatrixMul(uMMatrixUpperBody,CreateTranslationMatrix(UpperBodyPositionX, LowerBodyPositionY, LowerBodyPositionZ));

  uMMatrixUpperBody = MatrixMul(uMMatrixUpperBody, CreateTranslationMatrix(HeadSizeX, 0.0, 0.0));
  uMMatrixUpperBody = MatrixMul(uMMatrixUpperBody, CreateTranslationMatrix(HeadPositionX, HeadPositionY, HeadPositionZ));

  //Korpus Doł
  uMMatrixLowerBody = MatrixMul(uMMatrixLowerBody,CreateScaleMatrix(LowerBodySizeX, LowerBodySizeY, LowerBodySizeZ));
  uMMatrixLowerBody = MatrixMul(uMMatrixLowerBody,CreateTranslationMatrix(LowerBodySizeX, 0.0,0.0));
  uMMatrixLowerBody = MatrixMul(uMMatrixLowerBody,CreateRotationZMatrix(LowerBodyAngleZ));
  uMMatrixLowerBody = MatrixMul(uMMatrixLowerBody,CreateTranslationMatrix(LowerBodyPositionX, LowerBodyPositionY, LowerBodyPositionZ));

  uMMatrixLowerBody = MatrixMul(uMMatrixLowerBody, CreateTranslationMatrix(UpperBodySizeX, 0.0,0.0));
  uMMatrixLowerBody = MatrixMul(uMMatrixLowerBody, CreateTranslationMatrix(UpperBodyPositionX, UpperBodyPositionY, UpperBodyPositionZ));  
  
  // Głowa
  uMMatrixHead = MatrixMul(uMMatrixHead,CreateScaleMatrix(HeadSizeX, HeadSizeY, HeadSizeZ));
  uMMatrixHead = MatrixMul(uMMatrixHead,CreateTranslationMatrix(HeadSizeX, 0.0,0.0));
  uMMatrixHead = MatrixMul(uMMatrixHead,CreateRotationZMatrix(HeadAngleZ));
  uMMatrixHead = MatrixMul(uMMatrixHead,CreateTranslationMatrix(HeadPositionX, HeadPositionY, HeadPositionZ));
  
  // Lewe ramię - górne
  uMMatrixLeftUpperArm = MatrixMul(uMMatrixLeftUpperArm,CreateScaleMatrix(LeftUpperArmSizeX, LeftUpperArmSizeY, LeftUpperArmSizeZ));
  uMMatrixLeftUpperArm = MatrixMul(uMMatrixLeftUpperArm,CreateTranslationMatrix(LeftUpperArmSizeX, 0.0,0.0));
  uMMatrixLeftUpperArm = MatrixMul(uMMatrixLeftUpperArm,CreateRotationXMatrix(LeftUpperArmAngleX));
  uMMatrixLeftUpperArm = MatrixMul(uMMatrixLeftUpperArm,CreateRotationZMatrix(LeftUpperArmAngleZ));
  uMMatrixLeftUpperArm = MatrixMul(uMMatrixLeftUpperArm,CreateTranslationMatrix(LeftUpperArmPositionX, LeftUpperArmPositionY, LeftUpperArmPositionZ));


  // Lewe ramię - dolne
  uMMatrixLeftLowerArm = MatrixMul(uMMatrixLeftLowerArm,CreateScaleMatrix(LeftLowerArmSizeX, LeftLowerArmSizeY, LeftLowerArmSizeZ));
  uMMatrixLeftLowerArm = MatrixMul(uMMatrixLeftLowerArm,CreateTranslationMatrix(LeftLowerArmSizeX, 0.0,0.0))
  uMMatrixLeftLowerArm = MatrixMul(uMMatrixLeftLowerArm,CreateRotationXMatrix(LeftLowerArmAngleX));
  uMMatrixLeftLowerArm = MatrixMul(uMMatrixLeftLowerArm,CreateRotationZMatrix(LeftLowerArmAngleZ));
  uMMatrixLeftLowerArm = MatrixMul(uMMatrixLeftLowerArm,CreateTranslationMatrix(LeftLowerArmPositionX, LeftLowerArmPositionY, LeftLowerArmPositionZ));

  uMMatrixLeftLowerArm = MatrixMul(uMMatrixLeftLowerArm,CreateTranslationMatrix(LeftUpperArmSizeX, 0.0,0.0))
  uMMatrixLeftLowerArm = MatrixMul(uMMatrixLeftLowerArm,CreateRotationXMatrix(LeftUpperArmAngleX));
  uMMatrixLeftLowerArm = MatrixMul(uMMatrixLeftLowerArm,CreateTranslationMatrix(LeftUpperArmPositionX, LeftUpperArmPositionY, LeftUpperArmPositionZ));


  // Prawe ramię - górne
  uMMatrixRightUpperArm = MatrixMul(uMMatrixRightUpperArm,CreateScaleMatrix(RightUpperArmSizeX, RightUpperArmSizeY, RightUpperArmSizeZ));
  uMMatrixRightUpperArm = MatrixMul(uMMatrixRightUpperArm,CreateTranslationMatrix(RightUpperArmSizeX, 0.0,0.0));
  uMMatrixRightUpperArm = MatrixMul(uMMatrixRightUpperArm,CreateRotationXMatrix(RightUpperArmAngleX));
  uMMatrixRightUpperArm = MatrixMul(uMMatrixRightUpperArm,CreateRotationZMatrix(RightUpperArmAngleZ));
  uMMatrixRightUpperArm = MatrixMul(uMMatrixRightUpperArm,CreateTranslationMatrix(RightUpperArmPositionX, RightUpperArmPositionY, RightUpperArmPositionZ));
  
  // Prawe ramię - dolne
  uMMatrixRightLowerArm = MatrixMul(uMMatrixRightLowerArm,CreateScaleMatrix(RightLowerArmSizeX, RightLowerArmSizeY, RightLowerArmSizeZ));
  uMMatrixRightLowerArm = MatrixMul(uMMatrixRightLowerArm,CreateTranslationMatrix(RightLowerArmSizeX, 0.0,0.0))
  uMMatrixRightLowerArm = MatrixMul(uMMatrixRightLowerArm,CreateRotationXMatrix(RightLowerArmAngleX));
  uMMatrixRightLowerArm = MatrixMul(uMMatrixRightLowerArm,CreateRotationZMatrix(RightLowerArmAngleZ));
  uMMatrixRightLowerArm = MatrixMul(uMMatrixRightLowerArm,CreateTranslationMatrix(RightLowerArmPositionX, RightLowerArmPositionY, RightLowerArmPositionZ));

  uMMatrixRightLowerArm = MatrixMul(uMMatrixRightLowerArm,CreateTranslationMatrix(RightUpperArmSizeX, 0.0,0.0))
  uMMatrixRightLowerArm = MatrixMul(uMMatrixRightLowerArm,CreateRotationXMatrix(RightUpperArmAngleX));
  uMMatrixRightLowerArm = MatrixMul(uMMatrixRightLowerArm,CreateTranslationMatrix(RightUpperArmPositionX, RightUpperArmPositionY, RightUpperArmPositionZ));
  
  // Lewa noga - udo
  uMMatrixLeftUpperLeg = MatrixMul(uMMatrixLeftUpperLeg,CreateScaleMatrix(LeftUpperLegSizeX, LeftUpperLegSizeY, LeftUpperLegSizeZ));
  uMMatrixLeftUpperLeg = MatrixMul(uMMatrixLeftUpperLeg, CreateTranslationMatrix(LeftUpperLegSizeX, 0.0,0.0));
  uMMatrixLeftUpperLeg = MatrixMul(uMMatrixLeftUpperLeg, CreateRotationXMatrix(LeftUpperLegAngleX));
  uMMatrixLeftUpperLeg = MatrixMul(uMMatrixLeftUpperLeg, CreateRotationZMatrix(LeftUpperLegAngleZ));
  uMMatrixLeftUpperLeg = MatrixMul(uMMatrixLeftUpperLeg,CreateTranslationMatrix(LeftUpperLegPositionX, LeftUpperLegPositionY, LeftUpperLegPositionZ));
  
  // Lewa noga - piszczel
  uMMatrixLeftLowerLeg = MatrixMul(uMMatrixLeftLowerLeg,CreateScaleMatrix(LeftLowerLegSizeX, LeftLowerLegSizeY, LeftLowerLegSizeZ));
  uMMatrixLeftLowerLeg = MatrixMul(uMMatrixLeftLowerLeg, CreateTranslationMatrix(LeftLowerLegSizeX, 0.0,0.0));
  uMMatrixLeftLowerLeg = MatrixMul(uMMatrixLeftLowerLeg, CreateRotationXMatrix(LeftLowerLegAngleX));
  uMMatrixLeftLowerLeg = MatrixMul(uMMatrixLeftLowerLeg, CreateRotationZMatrix(LeftLowerLegAngleZ));
  uMMatrixLeftLowerLeg = MatrixMul(uMMatrixLeftLowerLeg,CreateTranslationMatrix(LeftLowerLegPositionX, LeftLowerLegPositionY, LeftLowerLegPositionZ));

  uMMatrixLeftLowerLeg = MatrixMul(uMMatrixLeftLowerLeg, CreateTranslationMatrix(LeftUpperLegSizeX, 0.0,0.0));
  uMMatrixLeftLowerLeg = MatrixMul(uMMatrixLeftLowerLeg, CreateRotationXMatrix(LeftUpperLegAngleX));
  uMMatrixLeftLowerLeg = MatrixMul(uMMatrixLeftLowerLeg,CreateTranslationMatrix(LeftUpperLegPositionX, LeftUpperLegPositionY, LeftUpperLegPositionZ));

  
  // Prawa noga - udo
  uMMatrixRightUpperLeg = MatrixMul(uMMatrixRightUpperLeg,CreateScaleMatrix(RightUpperLegSizeX, RightUpperLegSizeY, RightUpperLegSizeZ));
  uMMatrixRightUpperLeg = MatrixMul(uMMatrixRightUpperLeg, CreateTranslationMatrix(RightUpperLegSizeX, 0.0,0.0));
  uMMatrixRightUpperLeg = MatrixMul(uMMatrixRightUpperLeg, CreateRotationXMatrix(RightUpperLegAngleX));
  uMMatrixRightUpperLeg = MatrixMul(uMMatrixRightUpperLeg, CreateRotationZMatrix(RightUpperLegAngleZ));
  uMMatrixRightUpperLeg = MatrixMul(uMMatrixRightUpperLeg,CreateTranslationMatrix(RightUpperLegPositionX, RightUpperLegPositionY, RightUpperLegPositionZ));
  
  // Prawa noga - piszczel
  uMMatrixRightLowerLeg = MatrixMul(uMMatrixRightLowerLeg,CreateScaleMatrix(RightLowerLegSizeX, RightLowerLegSizeY, RightLowerLegSizeZ));
  uMMatrixRightLowerLeg = MatrixMul(uMMatrixRightLowerLeg, CreateTranslationMatrix(RightLowerLegSizeX, 0.0,0.0));
  uMMatrixRightLowerLeg = MatrixMul(uMMatrixRightLowerLeg, CreateRotationXMatrix(RightLowerLegAngleX));
  uMMatrixRightLowerLeg = MatrixMul(uMMatrixRightLowerLeg, CreateRotationZMatrix(RightLowerLegAngleZ));
  uMMatrixRightLowerLeg = MatrixMul(uMMatrixRightLowerLeg,CreateTranslationMatrix(RightLowerLegPositionX, RightLowerLegPositionY, RightLowerLegPositionZ));

  uMMatrixRightLowerLeg = MatrixMul(uMMatrixRightLowerLeg, CreateTranslationMatrix(RightUpperLegSizeX, 0.0,0.0));
  uMMatrixRightLowerLeg = MatrixMul(uMMatrixRightLowerLeg, CreateRotationXMatrix(RightUpperLegAngleX));
  uMMatrixRightLowerLeg = MatrixMul(uMMatrixRightLowerLeg,CreateTranslationMatrix(RightUpperLegPositionX, RightUpperLegPositionY, RightUpperLegPositionZ));

  // Światło
  uMMatrix0 = MatrixMul(uMMatrix0,CreateScaleMatrix(LightSize, LightSize, LightSize));
  uMMatrix0 = MatrixMul(uMMatrix0,CreateTranslationMatrix(LightPositionX, LightPositionY, LightPositionZ));
  
  
  
  //alert(uPMatrix);
  
  //Render Scene
  gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight); 
  gl.clearColor(1.0,0.0,0.0,1.0); //Wyczyszczenie obrazu kolorem czerwonym
  gl.clearDepth(1.0);             //Wyczyścienie bufora głebi najdalszym planem
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  gl.useProgram(shaderProgram)   //Użycie przygotowanego programu shaderowego
  
  gl.enable(gl.DEPTH_TEST);           // Włączenie testu głębi - obiekty bliższe mają przykrywać obiekty dalsze
  gl.depthFunc(gl.LEQUAL);            // 
  
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uPMatrix"), false, new Float32Array(uPMatrix)); //Wgranie macierzy kamery do pamięci karty graficznej
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uVMatrix"), false, new Float32Array(uVMatrix));
  gl.uniform1f(gl.getUniformLocation(shaderProgram, "uNormalMul"),1.0);
  
  
  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexPosition"));  //Przekazanie położenia
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexPosition"), vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
  
  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexNormal"));  //Przekazywanie wektorów normalnych
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexNormalBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexNormal"), vertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);
  
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uLightPosition"),LightPositionX,LightPositionY,LightPositionZ);
  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania
  

//glowa
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixHead));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixHead)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.0,1.0,0.0);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania

  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixUpperBody));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixUpperBody)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.5,0.0,0.0);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania

  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixLowerBody));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixLowerBody)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.5,0.3,0.0);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania
  

  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixLeftLowerArm));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixLeftLowerArm)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.2,0.0,0.7);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania

  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixLeftUpperArm));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixLeftUpperArm)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.5,0.0,0.9);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania

    gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixLeftLowerLeg));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixLeftLowerLeg)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.0,1.0,0.5);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania

  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixLeftUpperLeg));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixLeftUpperLeg)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.0,0.8,0.8);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania

  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixRightLowerArm));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixRightUpperArm)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.2,0.0,0.7);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania

  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixRightUpperArm));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixRightUpperArm)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.5,0.0,0.9);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania

  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixRightLowerLeg));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixRightLowerLeg)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.0,1.0,0.5);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania

  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMMatrix"), false, new Float32Array(uMMatrixRightUpperLeg));
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uInvMMatrix"), false, new Float32Array(MatrixTransposeInverse(uMMatrixRightUpperLeg)));
  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uColor"),0.0,0.8,0.8);  
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*vertexPositionBuffer.itemSize); //Faktyczne wywołanie rendrowania
  setTimeout(Tick,100);

}
function handlekeydown(e)
{
 // Q W E A S D
 if(e.keyCode==87) angleX=angleX+1.0; //W
 if(e.keyCode==83) angleX=angleX-1.0; //S
 if(e.keyCode==68) angleY=angleY+1.0;
 if(e.keyCode==65) angleY=angleY-1.0;
 if(e.keyCode==81) angleZ=angleZ+1.0;
 if(e.keyCode==69) angleZ=angleZ-1.0;
 //alert(e.keyCode);
 //alert(angleX);
 
 //U I O J K L
 if(e.keyCode==76) LightPositionX=LightPositionX+0.1;
 if(e.keyCode==74) LightPositionX=LightPositionX-0.1;
 if(e.keyCode==73) LightPositionY=LightPositionY+0.1;
 if(e.keyCode==75) LightPositionY=LightPositionY-0.1;
 if(e.keyCode==85) LightPositionZ=LightPositionZ+0.1;
 if(e.keyCode==79) LightPositionZ=LightPositionZ-0.1;
 
 //Z X
 if(e.keyCode==88) 
 {
    if(LeftUpperArmAngleX < 45){
      LeftUpperArmAngleX = LeftUpperArmAngleX - 0.8;
      LeftLowerArmAngleX = LeftLowerArmAngleX - 0.2;
      RightUpperArmAngleX = RightUpperArmAngleX + 0.8;
      RightLowerArmAngleX = RightLowerArmAngleX + 0.2;
      LeftUpperLegAngleX = LeftUpperLegAngleX + 0.5;
      LeftLowerLegAngleX = LeftLowerLegAngleX + 0.2;
      RightUpperLegAngleX = RightUpperLegAngleX - 0.5;
      RightLowerLegAngleX = RightLowerLegAngleX -0.2;
    }
    else{
    LeftUpperArmAngleX = LeftUpperArmAngleX + 0.8;
    LeftLowerArmAngleX = LeftLowerArmAngleX + 0.2;
    RightUpperArmAngleX = RightUpperArmAngleX - 0.8;
    RightLowerArmAngleX = RightLowerArmAngleX - 0.2;
    LeftUpperLegAngleX = LeftUpperLegAngleX - 0.5;
    LeftLowerLegAngleX = LeftLowerLegAngleX - 0.2;
    RightUpperLegAngleX = RightUpperLegAngleX + 0.5;
    RightLowerLegAngleX = RightLowerLegAngleX + 0.2;
    }

 }
 /*if(e.keyCode==90) 
 {
    LeftUpperArmAngleX = LeftUpperArmAngleX + 0.8;
    LeftLowerArmAngleX = LeftLowerArmAngleX + 0.2;
    RightUpperArmAngleX = RightUpperArmAngleX - 0.8;
    RightLowerArmAngleX = RightLowerArmAngleX - 0.2;
    LeftUpperLegAngleX = LeftUpperLegAngleX - 0.5;
    LeftLowerLegAngleX = LeftLowerLegAngleX - 0.2;
    RightUpperLegAngleX = RightUpperLegAngleX + 0.5;
    RightLowerLegAngleX = RightLowerLegAngleX + 0.2;



 }*/
 //C V
 if(e.keyCode==67) Object2AngleZ=Object2AngleZ-0.1;
 if(e.keyCode==86) Object2AngleZ=Object2AngleZ+0.1;
 
 //B N
 if(e.keyCode==66) Object3AngleZ=Object3AngleZ-0.1;
 if(e.keyCode==78) Object3AngleZ=Object3AngleZ+0.1;
}
</script>
</head>
<body onload="startGL()" onkeydown="handlekeydown(event)">
<canvas id="canvas3D" width="640" height="480" style="border: solid black 1px">;</canvas>
</body>
</html>
